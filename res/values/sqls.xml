<?xml version="1.0" encoding="utf-8"?>
<resources>
  <string-array name="db_create_sql">
    <!-- AUTOINCREMENT is only allowed on an INTEGER PRIMARY KEY -->
    <item name="account_create">
        CREATE TABLE IF NOT EXISTS [Account] (
            [Account_ID]             INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
            [Auth_Token]             TEXT NOT NULL,
            [Auth_Secret]            TEXT NOT NULL,
            [Auth_Version]           INTEGER NOT NULL,
            [Token_Expires_At]       DATETIME,
            [Token_Scopes]           TEXT,
            [User_ID]                TEXT NOT NULL,
            [Screen_Name]            TEXT NOT NULL,
            [Service_Provider]       INTEGER NOT NULL,
            [App_Key]                TEXT NOT NULL,
            [App_Secret]             TEXT NOT NULL,
            [State]                  INTEGER NOT NULL,
            [Is_Default]             BOOLEAN NOT NULL,
            [Created_At]             DATETIME NOT NULL,
            [Rest_Proxy_Url]         TEXT,
            [Search_Proxy_Url]       TEXT
        );
    </item>
    <item name="status_create">
        CREATE TABLE IF NOT EXISTS [Status] (
            [Status_ID]              TEXT NOT NULL,
            [Account_ID]             INTEGER NOT NULL,
            [Created_At]             DATETIME NOT NULL,
            [Text]                   TEXT NOT NULL,
            [Source]                 TEXT,
            [Is_Truncated]           BOOLEAN,
            [Is_Favorated]           BOOLEAN,
            [Thumbnail_Picture]      TEXT,
            [Middle_Picture]         TEXT,
            [Original_Picture]       TEXT,
            [Geo]                    TEXT,
            [Retweeted_Status_ID]    TEXT,
            [User_ID]                TEXT NOT NULL DEFAULT 0,
            [Catalog]                INTEGER NOT NULL,
            [Service_Provider]       INTEGER NOT NULL,
            [Retweet_Count]          INTEGER NOT NULL DEFAULT 0,
            [Comment_Count]          INTEGER NOT NULL DEFAULT 0,
            [Is_Divider]             BOOLEAN NOT NULL,
            CONSTRAINT [Status_PK] PRIMARY KEY ([Account_ID],[Service_Provider],[Catalog],[Status_ID])
        );
    </item>
    <item name="message_create">
        CREATE TABLE IF NOT EXISTS [Direct_Message] (
            [Msg_ID]                 Text NOT NULL,
            [Account_ID]             INTEGER NOT NULL,
            [Msg_Text]               Text NOT NULL,
            [Sender_ID]              TEXT NOT NULL,
            [Recipient_ID]           TEXT NOT NULL,
            [Created_At]             DATE NOT NULL,
            [Sender_Screen_Name]     Text NOT NULL,
            [Recipient_Screen_Name]  Text NOT NULL,
            [Service_Provider]       INTEGER NOT NULL,
            [Is_Divider]             BOOLEAN NOT NULL,
            CONSTRAINT [Direct_Message_PK] PRIMARY KEY ([Account_ID],[Service_Provider], [Msg_ID])
        );
    </item>
    <item name="user_create">
      CREATE TABLE IF NOT EXISTS [User] (
          [Service_Provider]       INTEGER NOT NULL,
          [User_ID]                TEXT NOT NULL,
          [Screen_Name]            TEXT NOT NULL,
          [Name]                   TEXT,
          [Gender]                 TEXT,
          [Location]               TEXT,
          [Description]            TEXT,
          [Verified]               BOOLEAN,
          [Profile_Image_Url]      TEXT,
          [Created_At]             DATETIME NOT NULL,
          CONSTRAINT [User_PK] PRIMARY KEY (Service_Provider, User_ID)
      );
    </item>
    <item name="comment_create">
        CREATE TABLE IF NOT EXISTS [Comment](
            [Account_ID]             INT NOT NULL,
            [Comment_ID]             TEXT NOT NULL,
            [Text]                   TEXT NOT NULL,
            [Source]                 TEXT,
            [Is_Favorated]           BOOLEAN,
            [Is_Truncated]           BOOLEAN,
            [Created_At]             DATE NOT NULL,
            [User_ID]                TEXT NOT NULL DEFAULT 0,
            [In_Reply_To_Status_ID]  TEXT,
            [In_Reply_To_Comment_ID] TEXT,
            [Service_Provider]       INT NOT NULL,
            [Is_Divider]             BOOLEAN NOT NULL,
            CONSTRAINT [Comment_PK] PRIMARY KEY ([Account_ID],[Service_Provider],[Comment_ID])
        );
    </item>
    <item name="config_system_create">
        CREATE TABLE IF NOT EXISTS [Config_System] (
            [Config_Key]             TEXT NOT NULL PRIMARY KEY,
            [Config_Value]           TEXT NULL,
            [Config_Description]     TEXT NULL
        );
    </item>
    <item name="social_graph_create">
        CREATE TABLE IF NOT EXISTS [Social_Graph] (
            [User_A_ID]              TEXT NOT NULL,
            [User_B_ID]              TEXT NOT NULL,
            [Relationship]           INT NOT NULL,
            [Service_Provider]       INT NOT NULL,
            CONSTRAINT [Social_Graph_PK] PRIMARY KEY (User_B_ID, User_A_ID, Relationship, Service_Provider)
        );
    </item>
    <item name="group_info_create">
        CREATE TABLE IF NOT EXISTS [Group_Info] (
            [Group_ID]  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
            [SP_Group_ID]            TEXT NULL,
            [Remote_Group_ID]        INT NULL,
            [Group_Name]             TEXT NOT NULL,
            [Created_At]             DATE NOT NULL,
            [State]                  INT NOT NULL,
            [Account_ID]             INT NOT NULL
      );
    </item>
    <item name="user_group_create">
        CREATE TABLE IF NOT EXISTS [User_Group] (
            [Group_ID]               LONG NOT NULL,
            [User_ID]                TEXT NOT NULL,
            [Service_Provider]       INT NOT NULL,
            [State]                  INT NOT NULL,
            CONSTRAINT [User_Group_PK] PRIMARY KEY (Group_ID, User_ID, Service_Provider)
        );
    </item>
    <item name="config_system_create">
        CREATE TABLE IF NOT EXISTS [Config_App] (
            [App_ID]            INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
		    [App_Name]          TEXT NOT NULL,
		    [App_Key]           TEXT NOT NULL,
		    [App_Secret]        TEXT NOT NULL,
		    [Auth_Version]      INT NOT NULL,
		    [Auth_Flow]         INT NOT NULL,
		    [Service_Provider]  INT NOT NULL
        );
    </item>
    <item name="task_create">
        CREATE TABLE IF NOT EXISTS [Task] (
            [Task_ID]              INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
            [Type]                 INT NOT NULL,
            [Content]              TEXT,
            [Result_ID]            VARCHAR(64),
            [Created_At]           DATETIME NOT NULL,
            [Finished_At]          DATETIME,
            [State]                INT NOT NULL,
            [Service_Provider]     INT NOT NULL,
            [Account_ID]           INT NOT NULL
        );
    </item>
    <item name="status_id_index">
        CREATE INDEX [Status_ID_Index] ON [Status] ([Status_ID]);
    </item>
    <item name="status_created_at_index">
        CREATE INDEX Status_Created_At_Index ON [Status] (Created_At DESC)
    </item>
    <item name="status_retweeted_status_id_index">
        CREATE INDEX [Status_Retweeted_Status_ID_Index] ON [Status] ([Retweeted_Status_ID]);
    </item>
    <item name="comment_created_at_index">
        CREATE INDEX [Comment_Created_At_Index] ON [Comment] (Created_At DESC);
    </item>
    <item name="comment_reply_to_status_id_index">
        CREATE INDEX [Comment_Reply_To_Status_ID_Index] ON [Comment] ([In_Reply_To_Status_ID]);
    </item>
    <item name="message_created_at_index">
        CREATE INDEX [Message_Created_At_Index] ON [Direct_Message] (Created_At DESC);
    </item>
    <item name="message_sender_index">
        CREATE INDEX [Message_Sender_Index] ON [Direct_Message] ([Sender_ID]);
    </item>
    <item name="message_recipient_index">
        CREATE INDEX [Message_Recipient_Index] ON [Direct_Message] ([Recipient_ID]);
    </item>
    <item name="user_id_index">
        CREATE INDEX [User_ID_Index] ON [User] ([User_ID]);
    </item>
    <item name="app_key_index">
        CREATE INDEX [App_Key_Index] ON [Config_App] ([App_Key]);
    </item>
    <item name="task_created_at_index">
        CREATE INDEX Task_Created_At_Index ON [Task] (Created_At DESC)
    </item>    
  </string-array>

  <string-array name="db_destroy_sql">
    <item>
        DROP TABLE IF EXISTS [Account];
    </item>
    <item>
        DROP TABLE IF EXISTS [Status];
    </item>
    <item>
        DROP TABLE IF EXISTS [Direct_Message];
    </item>
    <item>
        DROP TABLE IF EXISTS [DirectMessage];
    </item>
    <item>
        DROP TABLE IF EXISTS [User];
    </item>
    <item>
        DROP TABLE IF EXISTS [Comment];
    </item>
    <item>
        DROP TABLE IF EXISTS [Group_Info];
    </item>
    <item>
        DROP TABLE IF EXISTS [User_Group];
    </item>
    <item>
        DROP TABLE IF EXISTS [Setting];
    </item>
    <item>
        DROP TABLE IF EXISTS [Config_App];
    </item>
  </string-array>
  <string-array name="db_data_clean_sql">
    <item>
        DELETE FROM Status;
    </item>
    <item>
        DELETE FROM Comment;
    </item>
    <item>
        DELETE FROM Direct_Message;
    </item>
    <item>
        DELETE FROM Social_Graph;
    </item>
    <item>
      DELETE FROM
          User
      WHERE
          User_ID in (
              SELECT
                  a.User_ID
              FROM
                  User a
              WHERE
	              NOT EXISTS (
	                  SELECT
	                      c.Account_ID
	                  FROM
	                      Account c
	                  Where
	                      c.User_ID = a.User_ID
	              )
          );

    </item>
    <item>
        DELETE FROM Group_Info;
    </item>
    <item>
        DELETE FROM User_Group;
    </item>
  </string-array>

  <string-array name="db_clean_status_sql">
      <item>
		DELETE FROM
		    Status
		WHERE
		    Status_ID in (
			    SELECT
			        c.Status_ID
			    FROM
			        Status c
			    WHERE
			        c.Created_At &lt; %1$d and
		            (c.Catalog = %2$d or
		             c.Catalog = %3$d
		            )
		            AND NOT EXISTS (
		                SELECT
		                    a.Status_ID
		                FROM
		                    Status a
		                WHERE
		                    a.Retweeted_Status_ID = c.Status_ID and
		                    a.Created_At &gt;= %4$d
		            )
		            AND NOT EXISTS (
		                SELECT
		                    b.In_Reply_To_Status_ID
		                FROM
		                    Comment b
		                WHERE
		                    b.In_Reply_To_Status_ID = c.Status_ID
		         )
			 )
      </item>
  </string-array>

  <string-array name="db_query_status_sql">
      <item>
          select
              *
          from
              Status
          where
              Account_ID = %1$d and
              Catalog = %2$d
              %3$s
          order by
               Created_At desc
      </item>
      <item><!-- 条件片断 小于-->
          and Created_At &lt; %1$d
      </item>
      <item><!-- 条件片断 大于 -->
          and Created_At &gt; %1$d
      </item>
  </string-array>

  <string-array name="db_query_comment_sql">
      <item>
          select
              *
          from
              Comment
          where
              Account_ID = %1$d
              %2$s
          order by
               Created_At desc
      </item>
      <item><!-- 条件片断 小于-->
          and Created_At &lt; %1$d
      </item>
      <item><!-- 条件片断 大于 -->
          and Created_At &gt; %1$d
      </item>
  </string-array>

  <string-array name="db_query_direct_message_sql">
      <item><!-- 查询最近对话的用户id -->
          select
                distinct User_ID
            from (
                 select
                     Recipient_ID as User_ID, Created_At
                 from
                     Direct_Message
                 where
                     Sender_ID = \'%1$s\' and Account_ID = %2$d
                 union
                 select
                     Sender_ID as User_ID, Created_At
                 from
                     Direct_Message
                 where
                     Recipient_ID = \'%3$s\' and Account_ID = %4$d
             )
             order by Created_At desc
      </item>
      <item><!-- 找出与某用户的最近对话 -->
          select
              *
          from
              Direct_Message
          where
              (Sender_ID = \'%1$s\' or Recipient_ID = \'%2$s\') and
              Account_ID = %3$d
          order by Created_At desc limit 1
      </item>
      <item><!-- 统计与某用户对话数 -->
          select
              count(*)
          from
              Direct_Message
          where
              (Sender_ID = \'%1$s\' or Recipient_ID = \'%2$s\') and
              Is_Divider = 0 and
              Account_ID = %3$d
      </item>
      <item><!--查看与某用户全部对话  -->
          select
              *
          from
              Direct_Message
          where
              (Sender_ID = \'%1$s\' or Recipient_ID = \'%2$s\') and
              Account_ID = %3$d
              %4$s
          order by
              Created_At desc
      </item>
  </string-array>
</resources>
